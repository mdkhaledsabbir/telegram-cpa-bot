import telebot
from telebot import types
import json, os, time

TOKEN = 'ржЖржкржирж╛рж░ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржмржЯ ржЯрзЛржХрзЗржи'
ADMIN_ID = 8046323012
USER_FILE = 'users.json'
TASK_REWARD = 30
REF_REWARD = 10
MIN_WITHDRAW = 1000
user_screenshot_state = {}

bot = telebot.TeleBot(TOKEN)

if not os.path.exists(USER_FILE):
    with open(USER_FILE, 'w') as f:
        json.dump({}, f)

def load_users():
    with open(USER_FILE, 'r') as f:
        return json.load(f)

def save_users(data):
    with open(USER_FILE, 'w') as f:
        json.dump(data, f)

@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.from_user.id)
    users = load_users()
    ref_id = message.text.split(" ")[-1] if len(message.text.split()) > 1 else None

    if user_id not in users:
        users[user_id] = {"balance": 0, "ref_by": ref_id if ref_id != user_id else None, "refs": []}
        if ref_id and ref_id in users and user_id not in users[ref_id].get("refs", []):
            users[ref_id].setdefault("refs", []).append(user_id)
            users[ref_id]["balance"] += REF_REWARD
        save_users(users)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("ЁЯУЛ ржЯрж╛рж╕рзНржХ", "ЁЯУд рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржкрж╛ржарж╛ржи")
    markup.add("ЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕", "ЁЯТ╕ ржЯрж╛ржХрж╛ ржЙрждрзНрждрзЛрж▓ржи")
    markup.add("ЁЯСе рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржВржХ")
    bot.send_message(message.chat.id, "рж╕рзНржмрж╛ржЧрждржо! ржирж┐ржЪрзЗрж░ ржорзЗржирзБ ржерзЗржХрзЗ ржХрж╛ржЬ ржХрж░рзБржи:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "ЁЯУЛ ржЯрж╛рж╕рзНржХ")
def tasks(message):
    task_list = [
        ("Task 1", "Pin submit - https://tinyurl.com/37xxp2an"),
        ("Task 2", "Pin submit - https://tinyurl.com/4vc76fw5"),
        ("Task 3", "Email sub - https://tinyurl.com/yyherfxt"),
        ("Task 4", "Email sub - https://tinyurl.com/25nt96v9")
    ]
    msg = "ЁЯУЭ ржЯрж╛рж╕рзНржХрж╕ржорзВрж╣:\n"
    for name, link in task_list:
        msg += f"\nЁЯФ╣ {name}: {link}\nЁЯУ╕ рзйржЯрж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЖржмрж╢рзНржпржХ"
    bot.send_message(message.chat.id, msg)

@bot.message_handler(func=lambda m: m.text == "ЁЯУд рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржкрж╛ржарж╛ржи")
def upload_screenshot(message):
    user_id = message.from_user.id
    user_screenshot_state[user_id] = {"count": 0, "expected": 3}
    bot.send_message(message.chat.id, "ЁЯУ╕ ржПржЦржи рзйржЯрж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржкрж╛ржарж╛ржи, ржПржХржЯрж┐ ржПржХржЯрж┐ ржХрж░рзЗред")

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    user_id = message.from_user.id
    if user_id in user_screenshot_state:
        user_screenshot_state[user_id]["count"] += 1
        count = user_screenshot_state[user_id]["count"]
        bot.forward_message(ADMIN_ID, message.chat.id, message.message_id)
        bot.send_message(ADMIN_ID, f"ЁЯЖФ ржЗржЙржЬрж╛рж░: {user_id}\nЁЯУ╕ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ {count}/3 ржЬржорж╛ ржжрж┐рзЯрзЗржЫрзЗ")

        if count >= user_screenshot_state[user_id]["expected"]:
            del user_screenshot_state[user_id]
            bot.send_message(message.chat.id, "тЬЕ ржзржирзНржпржмрж╛ржж! рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЬржорж╛ рж╣рзЯрзЗржЫрзЗред ржПржбржорж┐ржи рж╢рзАржШрзНрж░ржЗ ржЪрзЗржХ ржХрж░ржмрзЗржиред")
        else:
            bot.send_message(message.chat.id, f"ЁЯУ╕ {count}/3 рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржкрж╛ржУрзЯрж╛ ржЧрзЗржЫрзЗред ржЖрж░ржУ ржкрж╛ржарж╛ржиред")
    else:
        bot.send_message(message.chat.id, "тЭМ ржЖржЧрзЗ 'ЁЯУд рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржкрж╛ржарж╛ржи' ржЪрж╛ржкрзБржиред")

@bot.message_handler(func=lambda m: m.text == "ЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕")
def balance(message):
    user_id = str(message.from_user.id)
    users = load_users()
    if user_id in users:
        bal = users[user_id].get("balance", 0)
        refs = len(users[user_id].get("refs", []))
        bot.send_message(message.chat.id, f"ЁЯТ╡ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {bal} ржЯрж╛ржХрж╛\nЁЯСе рж░рзЗржлрж╛рж░рзЗрж▓: {refs} ржЬржи")
    else:
        bot.send_message(message.chat.id, "тЭМ рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи ржирзЗржЗред /start ржжрж┐ржи")

@bot.message_handler(func=lambda m: m.text == "ЁЯТ╕ ржЯрж╛ржХрж╛ ржЙрждрзНрждрзЛрж▓ржи")
def withdraw(message):
    user_id = str(message.from_user.id)
    users = load_users()
    balance = users.get(user_id, {}).get("balance", 0)
    if balance < MIN_WITHDRAW:
        bot.send_message(message.chat.id, f"тЭМ ржХржоржкржХрзНрж╖рзЗ {MIN_WITHDRAW} ржЯрж╛ржХрж╛ ржерж╛ржХрждрзЗ рж╣ржмрзЗред")
        return
    msg = bot.send_message(message.chat.id, "ЁЯз╛ bKash/Nagad/Rocket ржиржорзНржмрж░ ржжрж┐ржи:")
    bot.register_next_step_handler(msg, process_withdraw)

def process_withdraw(message):
    user_id = str(message.from_user.id)
    number = message.text.strip()
    users = load_users()
    amount = users[user_id]["balance"]
    users[user_id]["balance"] = 0
    save_users(users)
    bot.send_message(message.chat.id, f"тЬЕ {amount} ржЯрж╛ржХрж╛ ржЙрждрзНрждрзЛрж▓ржирзЗрж░ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред")
    bot.send_message(ADMIN_ID, f"ЁЯФФ ржирждрзБржи ржЙржЗржержбрзНрж░:\nЁЯЖФ {user_id}\nЁЯТ│ ржиржорзНржмрж░: {number}\nЁЯТ░ {amount} ржЯрж╛ржХрж╛")

@bot.message_handler(func=lambda m: m.text == "ЁЯСе рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржВржХ")
def refer(message):
    uid = message.from_user.id
    bot.send_message(message.chat.id, f"ЁЯФЧ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржВржХ:\nhttps://t.me/myoffer363bot?start={uid}\nржкрзНрж░рждрж┐ рж░рзЗржлрж╛рж░рзЗ {REF_REWARD} ржЯрж╛ржХрж╛")

# Run Forever
while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print("Error:", e)
        time.sleep(5)
